ccckmit@gmail.com
請列出二維的旋轉矩陣
一個二維的旋轉矩陣可以表示為：
  
$$
\begin{bmatrix}
\cos{\theta} & -\sin{\theta} \
\sin{\theta} & \cos{\theta}
\end{bmatrix}
$$

其中，$\theta$ 是旋轉的角度。例如，當 $\theta = \frac{\pi}{2}$ 時，旋轉矩陣為：

$$
\begin{bmatrix}
\cos{\frac{\pi}{2}} & -\sin{\frac{\pi}{2}} \
\sin{\frac{\pi}{2}} & \cos{\frac{\pi}{2}}
\end{bmatrix}
\begin{bmatrix}
0 & -1 \
1 & 0
\end{bmatrix}
$$

這個矩陣將向量 $(x, y)$ 旋轉 90 度，使其變為 $(-y, x)$。




ccckmit@gmail.com
請用 python 寫個二維的旋轉的函數
我們可以使用 NumPy 來實現二維旋轉矩陣：

Copy code
import numpy as np

def rotate_2d(vec, theta):
  # 將角度轉換為弧度
  theta = np.radians(theta)
  
  # 建立旋轉矩陣
  rot_matrix = np.array([
    [np.cos(theta), -np.sin(theta)],
    [np.sin(theta), np.cos(theta)]
  ])
  
  # 將向量與旋轉矩陣相乘，以實現旋轉
  return rot_matrix @ vec
使用方法如下：

Copy code
vec = np.array([1, 0])
rotated_vec = rotate_2d(vec, 90)
print(rotated_vec)  # [-0. 1.]
上面的程式碼會將 vec 向量旋轉 90 度，並輸出旋轉後的結果。




ccckmit@gmail.com
用數學寫出二維的縮放矩陣
一個二維的縮放矩陣可以表示為：

$$
\begin{bmatrix}
s_x & 0 \
0 & s_y
\end{bmatrix}
$$

其中，$s_x$ 和 $s_y$ 分別表示縮放在 x 和 y 方向上的比例。例如，如果我們希望將向量 $(x, y)$ 縮放 0.5 倍，則縮放矩陣為：

$$
\begin{bmatrix}
0.5 & 0 \
0 & 0.5
\end{bmatrix}
$$

這個矩陣將向量 $(x, y)$ 縮放 0.5 倍，使其變為 $(0.5x, 0.5y)$。




ccckmit@gmail.com
請用 python 寫個二維的縮放的函數
我們可以使用 NumPy 來實現二維縮放矩陣：

Copy code
import numpy as np

def scale_2d(vec, sx, sy):
  # 建立縮放矩陣
  scale_matrix = np.array([
    [sx, 0],
    [0, sy]
  ])
  
  # 將向量與縮放矩陣相乘，以實現縮放
  return scale_matrix @ vec
使用方法如下：

Copy code
vec = np.array([1, 1])
scaled_vec = scale_2d(vec, 0.5, 0.5)
print(scaled_vec)  # [0.5 0.5]
上面的程式碼會將 vec 向量縮放 0.5 倍，並輸出縮放後的結果。




ccckmit@gmail.com
用數學寫出二維的平移矩陣
一個二維的平移矩陣可以表示為：

$$
\begin{bmatrix}
1 & 0 & t_x \
0 & 1 & t_y \
0 & 0 & 1
\end{bmatrix}
$$

其中，$t_x$ 和 $t_y$ 分別表示平移的量在 x 和 y 方向上的比例。例如，如果我們希望將向量 $(x, y)$ 平移到 $(x+1, y+2)$，則平移矩陣為：

$$
\begin{bmatrix}
1 & 0 & 1 \
0 & 1 & 2 \
0 & 0 & 1
\end{bmatrix}
$$

這個矩陣將向量 $(x, y)$ 平移到 $(x+1, y+2)$。




ccckmit@gmail.com
請用 python 寫個二維的平移函數
我們可以使用 NumPy 來實現二維平移矩陣：

Copy code
import numpy as np

def translate_2d(vec, tx, ty):
  # 建立平移矩陣
  trans_matrix = np.array([
    [1, 0, tx],
    [0, 1, ty],
    [0, 0, 1]
  ])
  
  # 將向量擴展為 3 維向量，並與平移矩陣相乘，以實現平移
  homogeneous_vec = np.append(vec, 1)
  return trans_matrix @ homogeneous_vec
使用方法如下：

Copy code
vec = np.array([1, 1])
translated_vec = translate_2d(vec, 1, 2)
print(translated_vec)  # [2 3 1]
上面的程式碼會將 vec 向量平移到 $(x+1, y+2)$，並輸出平移後的結果。注意，由於這個函數會將向量擴展為 3 維向量，所以輸出結果會包含一個額外的元素，表示向量是否為齊次向量。




ccckmit@gmail.com
請列出三維的平移，縮放，旋轉矩陣
三維平移矩陣

三維平移矩陣可以表示為：

$$
\begin{bmatrix}
1 & 0 & 0 & t_x \
0 & 1 & 0 & t_y \
0 & 0 & 1 & t_z \
0 & 0 & 0 & 1
\end{bmatrix}
$$

其中，$t_x$，$t_y$ 和 $t_z$ 分別表示平移的量在 x，y 和 z 方向上的比例。例如，如果我們希望將向量 $(x, y, z)$ 平移到 $(x+1, y+2, z+3)$，則平移矩陣為：

$$
\begin{bmatrix}
1 & 0 & 0 & 1 \
0 & 1 & 0 & 2 \
0 & 0 & 1 & 3 \
0 & 0 & 0 & 1
\end{bmatrix}
$$

這個矩陣將向量 $(x, y, z)$ 平移到 $(x+1, y+2, z+3)$。

三維縮放矩陣

三維縮放矩陣可以表示為：

$$
\begin{bmatrix}
s_x & 0 & 0 \
0 & s_y & 0 \
0 & 0 & s_z
\end{bmatrix}
$$

其中，$s_x$，$s_y$ 和 $s_z$ 分別表示縮放在 x，y 和 z 方向上的比例。例如，如果我們希望將向量 $(x, y, z)$ 縮放 0.5 倍，則縮放矩陣為：

$$
\begin{bmatrix}
0.5 & 0 & 0 \
0 & 0.5 & 0 \
0 & 0 & 0.5
\end{bmatrix}
$$

這個矩陣將向量 $(x, y, z)$ 縮放 0.5 倍，使其變為 $(0.5x, 0.5y, 0.5z)$。

三維旋轉矩陣

三維旋轉矩陣可以表示




ccckmit@gmail.com
繼續
為：

$$
\begin{bmatrix}
\cos{\theta_x} & -\sin{\theta_x} & 0 \
\sin{\theta_x} & \cos{\theta_x} & 0 \
0 & 0 & 1
\end{bmatrix}
\begin{bmatrix}
1 & 0 & 0 \
0 & \cos{\theta_y} & -\sin{\theta_y} \
0 & \sin{\theta_y} & \cos{\theta_y}
\end{bmatrix}
\begin{bmatrix}
\cos{\theta_z} & 0 & -\sin{\theta_z} \
0 & 1 & 0 \
\sin{\theta_z} & 0 & \cos{\theta_z}
\end{bmatrix}
$$

其中，$\theta_x$，$\theta_y$ 和 $\theta_z$ 分別表示旋轉的角度在 x，y 和 z 方向上的比例。例如，如果我們希望將向量 $(x, y, z)$ 旋轉 90 度，則旋轉矩陣為：

$$
\begin{bmatrix}
1 & 0 & 0 \
0 & 0 & -1 \
0 & 1 & 0
\end{bmatrix}
$$

這個矩陣將向量 $(x, y, z)$ 旋轉 90 度，使其變為 $(-z, y, x)$。

注意，上面的矩陣並不是唯一的三維旋轉矩陣的形式。只要滿足旋轉矩陣滿足矩陣乘法的結合律，就可以把旋轵分為多個二維旋轉矩陣。例如，如果我們希望將向量 $(x, y, z)$ 旋轉 90 度，則旋轉矩陣也可以表示為：

$$
\begin{bmatrix}
\cos{\frac{\pi}{2}} & -\sin{\frac{\pi}{2}} & 0 \
\sin{\frac{\pi}{2}} & \cos{\frac{\pi}{2}} & 0 \
0 & 0 & 1
\end{bmatrix}
\begin{bmatrix}
1 & 0 & 0 \
0 & \cos{\frac




ccckmit@gmail.com
繼續
{\pi}{2}} & -\sin{\frac{\pi}{2}} \
0 & \sin{\frac{\pi}{2}} & \cos{\frac{\pi}{2}}
\end{bmatrix}
\begin{bmatrix}
\cos{\frac{\pi}{2}} & 0 & -\sin{\frac{\pi}{2}} \
0 & 1 & 0 \
\sin{\frac{\pi}{2}} & 0 & \cos{\frac{\pi}{2}}
\end{bmatrix}
$$

這個矩陣與前一個矩陣的作用是相同的，都將向量 $(x, y, z)$ 旋轉 90 度，使其變為 $(-z, y, x)$。

如果想要更詳細的了解三維旋轉矩陣，可以參考維基百科：https://en.wikipedia.org/wiki/Rotation_matrix。




ccckmit@gmail.com
請用 python 寫出上述的三維平移函數
我們可以使用 NumPy 來實現三維平移矩陣：

Copy code
import numpy as np

def translate_3d(vec, tx, ty, tz):
  # 建立平移矩陣
  trans_matrix = np.array([
    [1, 0, 0, tx],
    [0, 1, 0, ty],
    [0, 0, 1, tz],
    [0, 0, 0, 1]
  ])
  
  # 將向量擴展為 4 維向量，並與平移矩陣相乘，以實現平移
  homogeneous_vec = np.append(vec, 1)
  return trans_matrix @ homogeneous_vec
使用方法如下：

Copy code
vec = np.array([1, 1, 1])
translated_vec = translate_3d(vec, 1, 2, 3)
print(translated_vec)  # [2 3 4 1]
上面的程式碼會將 vec 向量平移到 $(x+1, y+2, z+3)$，並輸出平移後的結果。注意，由於這個函數會將向量擴展為 4 維向量，所以輸出結果會包含一個額外的元素，表示向量是否為齊次向量。




ccckmit@gmail.com
請用 python 寫出上述的三維縮放函數
我們可以使用 NumPy 來實現三維縮放矩陣：

Copy code
import numpy as np

def scale_3d(vec, sx, sy, sz):
  # 建立縮放矩陣
  scale_matrix = np.array([
    [sx, 0, 0],
    [0, sy, 0],
    [0, 0, sz]
  ])
  
  # 將向量與縮放矩陣相乘，以實現縮放
  return scale_matrix @ vec
使用方法如下：

Copy code
vec = np.array([1, 1, 1])
scaled_vec = scale_3d(vec, 0.5, 0.5, 0.5)
print(scaled_vec)  # [0.5 0.5 0.5]
上面的程式碼會將 vec 向量縮放 0.5 倍，並輸出縮放後的結果。




ccckmit@gmail.com
請用 python 寫出上述的三維旋轉函數
我們可以使用 NumPy 來實現三維旋轉矩陣：

Copy code
import numpy as np

def rotate_3d(vec, theta_x, theta_y, theta_z):
  # 建立旋轉矩陣
  rot_matrix = np.array([
    [np.cos(theta_x), -np.sin(theta_x), 0],
    [np.sin(theta_x), np.cos(theta_x), 0],
    [0, 0, 1]
  ]) @ np.array([
    [1, 0, 0],
    [0, np.cos(theta_y), -np.sin(theta_y)],
    [0, np.sin(theta_y), np.cos(theta_y)]
  ]) @ np.array([
    [np.cos(theta_z), 0, -np.sin(theta_z)],
    [0, 1, 0],
    [np.sin(theta_z), 0, np.cos(theta_z)]
  ])
  
  # 將向量與旋轉矩陣相乘，以實現旋轉
  return rot_matrix @ vec
使用方法如下：

Copy code
vec = np.array([1, 0, 0])
rotated_vec = rotate_3d(vec, np.pi/2, 0, 0)
print(rotated_vec)  # [0 1 0]
上面的程式碼會將 vec 向量旋轉 90 度，並輸出旋轉後的結果。注意，程式碼中的




ccckmit@gmail.com
繼續
旋轉矩陣並不是唯一的，這只是一種實現方法。只要滿足旋轉矩陣滿足矩陣乘法的結合律，就可以把旋轵分為多個二維旋轉矩陣。例如，如果想要將 vec 向量旋轉 90 度，也可以使用以下程式碼：

Copy code
vec = np.array([1, 0, 0])
rot_matrix = np.array([
  [np.cos(np.pi/2), -np.sin(np.pi/2), 0],
  [np.sin(np.pi/2), np.cos(np.pi/2), 0],
  [0, 0, 1]
]) @ np.array([
  [1, 0, 0],
  [0, np.cos(np.pi/2), -np.sin(np.pi/2)],
  [0, np.sin(np.pi/2), np.cos(np.pi/2)]
]) @ np.array([
  [np.cos(np.pi/2), 0, -np.sin(np.pi/2)],
  [0, 1, 0],
  [np.sin(np.pi/2), 0, np.cos(np.pi/2)]
])
rotated_vec = rot_matrix @ vec
print(rotated_vec)  # [0 1 0]
這




ccckmit@gmail.com
繼續
個程式碼和前一個程式碼的作用是相同的，都將 vec 向量旋轉 90 度，並輸出旋轉後的結果。

注意，如果要更詳細地了解三維旋轉矩陣，可以參考維基百科：https://en.wikipedia.org/wiki/Rotation_matrix。